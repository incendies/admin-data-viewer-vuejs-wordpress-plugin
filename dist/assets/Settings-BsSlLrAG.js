import{_ as c,c as l,a as o,m as u,p as d,q as p,t as m,k as h,u as f,o as g}from"../main.js";const y={name:"Settings",data(){return{settings:{numRows:5,dateFormat:"human"},statusMessage:"",apiData:{root_url:typeof yunusPluginData<"u"?yunusPluginData.root_url:"http://localhost:5173",nonce:typeof yunusPluginData<"u"?yunusPluginData.nonce:"development_nonce"}}},methods:{async loadSettings(){if(this.apiData.root_url==="http://localhost:5173"){console.log("Mock loading settings locally"),this.settings.numRows=5,this.settings.dateFormat="human",this.statusMessage="Settings loaded (Mock)";return}try{const n=`${this.apiData.root_url}/wp-json/yunus/v1/get-settings`,t=this.apiData.nonce!=="development_nonce"?{"X-WP-Nonce":this.apiData.nonce}:{},s=await fetch(n,{headers:t});if(console.log(`API URL: ${n}, Status: ${s.status}`),!s.ok)throw new Error(`HTTP error! status: ${s.status}`);const a=s.headers.get("content-type");if(!a||!a.includes("application/json")){const r=await s.text();throw console.error("Non-JSON response:",r),new Error("Expected JSON response, received HTML or other format.")}const e=await s.json();e&&(this.settings.numRows=e.numRows||5,this.settings.dateFormat=e.dateFormat||"human")}catch(n){console.error("Error loading settings:",n),this.statusMessage="Error loading settings. Please check console for details."}},async saveSettings(){if(this.apiData.root_url==="http://localhost:5173"){console.log("Mock saving settings locally:",this.settings),this.statusMessage="Settings saved successfully! (Mock)";return}try{const n=`${this.apiData.root_url}/wp-json/yunus/v1/update-setting`,t={"X-WP-Nonce":this.apiData.nonce,"Content-Type":"application/json"},s=await fetch(n,{method:"POST",headers:t,body:JSON.stringify({setting_key:"settings",setting_value:this.settings})});if(console.log(`API URL: ${n}, Status: ${s.status}`),!s.ok)throw new Error(`HTTP error! status: ${s.status}`);const a=s.headers.get("content-type");if(!a||!a.includes("application/json")){const r=await s.text();throw console.error("Non-JSON response:",r),new Error("Expected JSON response, received HTML or other format.")}(await s.json()).success?this.statusMessage="Settings saved successfully!":this.statusMessage="Failed to save settings."}catch(n){console.error("Error saving settings:",n),this.statusMessage="Error saving settings. Please check console for details."}}},mounted(){this.loadSettings()}},v={class:"form-group"},w={class:"form-group"},S={key:0};function M(n,t,s,a,e,r){return g(),l("div",null,[t[7]||(t[7]=o("h1",null,"Settings",-1)),o("form",{onSubmit:t[2]||(t[2]=f((...i)=>r.saveSettings&&r.saveSettings(...i),["prevent"]))},[o("div",v,[t[3]||(t[3]=o("label",{for:"numRows"},"Number of Rows:",-1)),u(o("input",{type:"number",id:"numRows","onUpdate:modelValue":t[0]||(t[0]=i=>e.settings.numRows=i),min:"1",max:"10"},null,512),[[d,e.settings.numRows]])]),o("div",w,[t[5]||(t[5]=o("label",{for:"dateFormat"},"Date Format:",-1)),u(o("select",{id:"dateFormat","onUpdate:modelValue":t[1]||(t[1]=i=>e.settings.dateFormat=i)},t[4]||(t[4]=[o("option",{value:"human"},"Human-readable",-1),o("option",{value:"timestamp"},"Unix Timestamp",-1)]),512),[[p,e.settings.dateFormat]])]),t[6]||(t[6]=o("button",{type:"submit"},"Save Settings",-1)),e.statusMessage?(g(),l("p",S,m(e.statusMessage),1)):h("",!0)],32)])}const k=c(y,[["render",M],["__scopeId","data-v-c89a0a14"]]);export{k as default};
